#!/bin/sh

EXECUTABLE="./testTextbuffer"
VALGRIND_OUT_FILE="/tmp/valgrind.$$"
USE_VALGRIND=1
NUM_TESTS=16

RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
RESET_COLOR="\033[0m"

RED_BOLD="\033[31;1m"
GREEN_BOLD="\033[32;1m"

main()
{
	reset
	autotest "$@"
	exit $?
}

reset()
{
	mkdir -p tests/
	rm -f tests/*.err
	rm -f tests/*.out
}

autotest()
{
	npassed=0
	nfailed=0
	
	if [ $# -gt 0 ]
	then
		for testno in "$@"
		do
			if ! echo "$testno" | egrep '^[0-9]*$' > /dev/null
			then
				printf "Invalid test number '$testno' - skipping...\n"
			elif [ "$testno" -lt 1 -o "$testno" -gt $NUM_TESTS ]
			then
				printf "Invalid test number '$testno' - skipping...\n"
			else
				testno=$(printf "%02d" $testno)
				
				if run_test "$testno"
				then
					npassed=$(expr $npassed + 1)
					printf "Test passed\n"
				else
					nfailed=$(expr $nfailed + 1)
					printf "Test failed\n"
				fi
				echo ""
			fi
		done
	else
		i=1
		while [ $i -le $NUM_TESTS ]
		do
			testno=$(printf "%02d" $i)
		
			if run_test "$testno"
			then
				npassed=$(expr $npassed + 1)
				printf "Test passed\n"
			else
				nfailed=$(expr $nfailed + 1)
				printf "Test failed\n"
			fi
			echo ""
			i=$(expr $i + 1)
		done
		
		show_autotest_summary "$npassed" "$nfailed"

		return "$nfailed"
	fi
}

# $1: test number - e.g., 01, 02, etc.
# Returns: 0 if the test passed, 1 if the test failed
run_test()
{
	mismatch=0
	memleak=0
	memerr=0
	
	cat "tests/$1.exp" | head -1

	if [ "$USE_VALGRIND" = "1" ]
	then
		valgrind "$EXECUTABLE" "$1" > "tests/$1.out" 2> "$VALGRIND_OUT_FILE"
	else
		"$EXECUTABLE" "$1" > "tests/$1.out"
	fi

	if ! diff "tests/$1.out" "tests/$1.exp" > /dev/null
	then
		diff --ignore-space-change --side-by-side --width=80 "tests/$1.out" "tests/$1.exp"
		mismatch=1
	fi

	if [ "$USE_VALGRIND" = "1" ]
	then
		if egrep "LEAK SUMMARY" "$VALGRIND_OUT_FILE" > /dev/null
		then
			memleak=1
		fi

		if ! egrep "ERROR SUMMARY: 0 errors" "$VALGRIND_OUT_FILE" > /dev/null
		then
			memerr=1
		fi
	fi

	show_test_feedback "$mismatch" "$memleak" "$memerr" "$1"

	case "$mismatch$memleak$memerr" in
	?1?|??1) cp "$VALGRIND_OUT_FILE" "tests/$1.err" ;;
	esac
	case "$mismatch$memleak$memerr" in
	000) return 0 ;;
	*)   return 1 ;;
	esac
}

# $1: was there an output mismatch (1/0)
# $2: was there a memory leak (1/0)
# $3: was there a memory error (1/0)
# $4: test input file
show_test_feedback()
{
	code="$1$2$3"
	# printf "$YELLOW"

	# general feedback
	case "$code" in
	001) printf "Your program gave the correct output, but contained memory errors. " ;;
	010) printf "Your program gave the correct output, but contained memory leaks. " ;;
	011) printf "Your program gave the correct output, but contained memory leaks and memory errors. " ;;
	100) printf "Your program gave the wrong output. " ;;
	101) printf "Your program gave the wrong output, and contained memory errors. " ;;
	110) printf "Your program gave the wrong output, and contained memory leaks. " ;;
	111) printf "Your program gave the wrong output, and contained memory leaks and memory errors. " ;;
	esac

	case "$code" in
	000) ;;
	*)   printf "\n" ;;
	esac
	
	# output mismatch advice
	# case "$code" in
	# 1??) printf "Compare your program's output and the expected output in $4.out and $4.exp, and check the input file in $4. " ;;
	# esac

	# memory leak/error advice
	# case "$code" in
	# 0?1|01?) printf "Check details of memory leaks/errors in $4.err.\n" ;;
	# 1?1|11?) printf "Also check details of memory leaks/errors in $4.err.\n" ;;
	# 100)     printf "\n" ;;
	# esac
	
	# printf "$RESET_COLOR"
}

# $1: number of tests passed
# $2: number of tests failed
show_autotest_summary()
{
	printf "$1 tests passed $2 tests failed\n"
	if [ $1 -gt 0 -a $2 -eq 0 ]
	then
		echo "All simple tests passed - you are awesome! Make sure to test other cases too."
	fi
}

main "$@"

